"""
Django settings for skillup24 project.

Generated by 'django-admin startproject' using Django 5.0.7.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

from pathlib import Path
import string
import secrets
import os

# Function to generate a random SECRET_KEY
def generate_secret_key(length=50):
    alphabet = string.ascii_letters + string.digits + '!@#$%^&*(-_=+)'
    return ''.join(secrets.choice(alphabet) for _ in range(length))

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Set SECRET_KEY using environment variable or generate a random one
SECRET_KEY = os.getenv("SECRET_KEY", generate_secret_key())

# --------------------------------------------------- start when in Production ----------------------------------------------------
# Ensure SECRET_KEY is set
if not SECRET_KEY:
    raise ValueError("The SECRET_KEY environment variable is not set.")

# # DEBUG settings
DEBUG = os.getenv('DEBUG', 'False').lower() == 'true'  # Ensures boolean True/False

# ALLOWED_HOSTS setting
ALLOWED_HOSTS = os.getenv('ALLOWED_HOSTS', '').split()  # Split string into a list

# Include Vercel's dynamic URL if it exists
VERCEL_URL = os.getenv('VERCEL_URL')
if VERCEL_URL:
    ALLOWED_HOSTS.append(VERCEL_URL)

# ----------------------------------------------------- end when in Production -------------------------------------------------------




# -------------------------------------------------When the debug in development is True ---------------------------------------------
# DEBUG = True  # Make sure this aligns with your environment variable

# ALLOWED_HOSTS = os.getenv('ALLOWED_HOSTS', '127.0.0.1 localhost').split()


# # # Logging
# LOGGING = {
#     'version': 1,
#     'disable_existing_loggers': False,
#     'handlers': {
#         'file': {
#             'level': 'DEBUG',
#             'class': 'logging.FileHandler',
#             'filename': os.path.join(BASE_DIR, 'debug.log'),
#         },
#     },
#     'loggers': {
#         'django': {
#             'handlers': ['file'],
#             'level': 'DEBUG',
#             'propagate': True,
#         },
#     },
# }

# --------------------------------------- End when the debug in the development True -------------------------------------------

# Application definition
INSTALLED_APPS = [
    'django.contrib.sitemaps',
    'account_app',
    'home_page_app',
    'admin_page_app',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
]

# Add WhiteNoise to middleware
MIDDLEWARE = [
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'admin_page_app.middleware.AdminAccessMiddleware',  # Add your middleware here
    'account_app.middleware.AuthenticationMiddleware',  # Add your middleware here
]

ROOT_URLCONF = 'skillup24.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                # Add custom context processors
                'admin_page_app.context_processors.admin_context',
                'account_app.context_processors.instructor_context',
                'account_app.context_processors.student_context',
                'home_page_app.context_processors.course_context_processor',
                'home_page_app.context_processors.category_context_processor',
                'home_page_app.context_processors.instructors_context_processor',
                'home_page_app.context_processors.instructor_rating_display',
                'home_page_app.context_processors.certificates_context_processor',
                'home_page_app.context_processors.reviews_context_processor',
                'home_page_app.context_processors.faq_context_processor',
                'home_page_app.context_processors.event_context_processor',
            ],
        },
    },
]

WSGI_APPLICATION = 'skillup24.wsgi.application'

# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'fahad2023_skillup24',
        'USER': 'fahad2023_skillup24',
        'PASSWORD': 'Bwz36&f30',
        'HOST': 'fahad2023.helioho.st',
        'PORT': '3306',
        'OPTIONS': {
            'init_command': "SET sql_mode='STRICT_TRANS_TABLES'",
        },
    }
}

import pymysql
pymysql.install_as_MySQLdb()


# Message
from django.contrib.messages import constants as messages
MESSAGE_TAGS = {
    messages.ERROR: 'danger',
}

# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators
AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/
LANGUAGE_CODE = 'en-us'
TIME_ZONE = 'UTC'
USE_I18N = True
USE_TZ = True

# Static files (CSS, JavaScript, Images)

STATIC_URL = '/static/'
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'static'), 
]
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'


# Media files (Images, Videos, etc)
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# Sessions
SESSION_COOKIE_AGE = 1209600  # 2 weeks in seconds (2 * 7 * 24 * 60 * 60)
SESSION_SAVE_EVERY_REQUEST = True  # Save the session to the database on every request
SESSION_EXPIRE_AT_BROWSER_CLOSE = False  # Session will not expire when the browser closes

BUNNY_STREAM_API_KEY = 'd1570f59-756f-4b5f-9f6acf2bcc8f-6e9d-496d'
BUNNY_STREAM_LIBRARY_ID = '292395'
BUNNY_STREAM_CDN_HOSTNAME = 'vz-43911117-675.b-cdn.net'


# For persistent sessions, consider using the database session backend
SESSION_ENGINE = 'django.contrib.sessions.backends.db'

# Email settings
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'smtp.gmail.com'
EMAIL_PORT = 587
EMAIL_USE_TLS = True
EMAIL_HOST_USER = os.environ.get('EMAIL_HOST_USER', 'abdisalanabdukadir@gmail.com')
EMAIL_HOST_PASSWORD = os.environ.get('EMAIL_HOST_PASSWORD', 'zbgc lshe blbq yvon')

# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field
# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
